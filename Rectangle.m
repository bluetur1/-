%第一题
t = [0 10 20 40 60 80 100 120 140 160 180 200 220 240 260 280 300 320 340 360 380 400]; % 时间向量
y = [0 0 0.2 0.6 1.2 1.6 1.8 2.0  1.9 1.7 1.6 1 0.8 0.7 0.7 0.6 0.6 0.4 0.2 0.2 0.15 0.15]; % 系统阶跃响应向量
figure;  
plot(t, y); % 原始数据点  
hold on;  
%  将矩形脉冲响应转换为阶跃响应
%  Δt=20s   幅值Δx=0.2  y1(t)=y(t)+y1(t-20);
%因此可以算出每个时刻的y1值，即阶跃响应值
y1 = [0 0 0.2 0.8 2 3.6 5.4 7.4 9.3 11.0 12.6 13.6 14.4 15.1 15.8 16.4 17.0 17.4 17.6 17.8 17.95 18.1]
t = [0 10 20 40 60 80 100 120 140 160 180 200 220 240 260 280 300 320 340 360 380 400];
plot(t, y1); % 原始数据点  
hold on;  
legend('矩形脉冲响应曲线', '阶跃响应曲线');  
%plot(t_fit, y_fit, 'r-'); %  
xlabel('时间');  
ylabel('液位响应');  
grid on;  
hold on;
%% 
%第二题
%作图法
y1 = [0 0 0.2 0.8 2 3.6 5.4 7.4 9.3 11.0 12.6 13.6 14.4 15.1 15.8 16.4 17.0 17.4 17.6 17.8 17.95 18.1]
t = [0 10 20 40 60 80 100 120 140 160 180 200 220 240 260 280 300 320 340 360 380 400];
plot(t, y1); % 原始数据点  
hold on;  
legend('矩形脉冲响应曲线', '阶跃响应曲线');  
%plot(t_fit, y_fit, 'r-'); %  
xlabel('时间');  
ylabel('液位响应');  
grid on;  
hold on;

%用作图法 
% 用中心差分法 一阶导数
% 假设x和y包含了曲线的坐标
x = [0 10 20 40 60 80 100 120 140 160 180 200 220 240 260 280 300 320 340 360 380 400]; % 
y = [0 0 0.2 0.8 2 3.6 5.4 7.4 9.3 11.0 12.6 13.6 14.4 15.1 15.8 16.4 17.0 17.4 17.6 17.8 17.95 18.1]; 

% 计算变化速度（近似导数）
dy = diff(y)./diff(x);
dx = (x(1:end-1) + x(2:end)) / 2; % 计算差分的中点，用于绘图

% 找到最大变化速度的点
[max_dy, idx] = max(abs(dy)); % 找到绝对值最大的变化速度

% 计算切线
% 切线斜率为max_dy，经过点(dx(idx), y(idx+1))
% 切线方程为：y = m(x - x1) + y1
% 其中，m为切线斜率，(x1, y1)是切点
m = dy(idx);
x1 = dx(idx);
y1 = y(idx+1);
% 定义切线的x范围（可根据需要调整）
x_tangent = x1 + linspace(-1, 1, 100);
% 切线的y坐标
y_tangent = m * (x_tangent - x1) + y1;

% 绘制原始曲线
plot(x, y, 'b-', 'LineWidth', 1.5);
hold on;
% 绘制变化速度最大点
plot(x1, y1, 'ro', 'MarkerSize', 10, 'LineWidth', 2);
% 绘制切线
plot(x_tangent, y_tangent, 'r--', 'LineWidth', 1.5);
hold off;
legend('原始曲线', '最大变化速度点', '切线');
xlabel('X');
ylabel('Y');
title('曲线及其最大变化速度点的切线');
grid on;

%----------------------先求出拐点，然后进行各种边界线的划分
%实际曲线
t = [0 10 20 40 60 80 100 120 140 160 180 200 220 240 260 280 300 320 340 360 380 400]; % 时间向量
y = [0 0 0.2 0.8 2 3.6 5.4 7.4 9.3 11.0 12.6 13.6 14.4 15.1 15.8 16.4 17.0 17.4 17.6 17.8 17.95 18.1]; % 系统阶跃响应向量

% 用最小二乘法拟合实际曲线
n = 6; % 多项式的阶数  
p = polyfit(t, y, n);  
% 创建一个新的时间向量用于绘制拟合曲线  
t_fit = linspace(min(t), max(t), 100);  
% 使用 polyval 计算拟合值  
y_fit = polyval(p, t_fit);  
% 绘制原始数据和拟合曲线  
figure;  
plot(t_fit,y_fit,'r-'); % 最小二乘法拟合曲线  
%legend('实际曲线', '拟合曲线');  
%plot(t_fit, y_fit, 'r-'); %  
xlabel('时间');  
ylabel('液位响应');  
grid on;  
hold on;
plot(t, y,'o-')
%拐点 （120，7.4）， 与（100，5.4） 两点连线为切线
%斜率slope
slope=(7.4-5.4)/(120-100)  %0.1
x2 = [40 60 80 100 120 140 300] 
y2=slope*(x2-120)+7.4
y2 = [slope*(40-120)+7.4 slope*(60-120)+7.4 slope*(80-120)+7.4 5.4 7.4 slope*(140-120)+7.4 slope*(300-120)+7.4]
plot(x2, y2); % 
hold on
z = 18.1 * ones(size(t)); % 创建一个与x相同大小，但所有值都是18.1的z数组
plot(t,z)
hold on
intersection_x=[(18.1-7.4)/0.1+120]  %;x=(y-7.4)/slope +120
intersection_y=[18.1]
plot(intersection_x,intersection_y,'ro')
intersection_x0=[(0-7.4)/0.1+120]  %;x=(y-7.4)/slope +120
intersection_y0=[0]
plot(intersection_x0,intersection_y0,'ro')

%因此可以求得K=输出稳态幅值/输入幅值  K=18.1/(0.2)= 90.5

%由图也可以求出延迟时间τ=46s,T=181
T=227-46  %T=181
%即通过作图法可以确定一阶惯性加滞后环节的参数 
% τ=40s T=181s K=90.5
% 定义传递函数的分子和分母多项式系数  
num = [90.5];  
den = [181 1];  
g=tf(num,den,'ioDelay',40)
step(g*0.2)
hold on

%% 
% 第二题
% K=输出稳态幅值/输入幅值  K=18.1/(0.2)= 90
% 求T和τ的计算法 
%首先要化成无量纲形式  即归一化
t = [0 10 20 40 60 80 100 120 140 160 180 200 220 240 260 280 300 320 340 360 380 400]; % 时间向量
y = [0 0 0.2 0.8 2 3.6 5.4 7.4 9.3 11.0 12.6 13.6 14.4 15.1 15.8 16.4 17.0 17.4 17.6 17.8 17.95 18.1]; % 系统阶跃响应向量
h=y/18.1;
%取两点 令y*(t1)=0.39 ,y*(t2)=0.63
%因此可以得出y(t1)=0.39*18.1=7.059       y(t2)=0.63*18.1=11.403
plot(t,h)
hold on

%然后在图中找出这两个点
t1 = [0 10 20 40 60 80 100 120 140 160 180 200 220 240 260 280 300 320 340 360 380 400]; % 时间向量
y2 = [0 0 0.2 0.8 2 3.6 5.4 7.4 9.3 11.0 12.6 13.6 14.4 15.1 15.8 16.4 17.0 17.4 17.6 17.8 17.95 18.1]; % 系统阶跃响应向量
plot(t1,y2)
hold on
z = 7.059 * ones(size(t)); % 创建一个与x相同大小，但所有值都是7.059的z数组
plot(t,z)
hold on
z1 = 11.403 * ones(size(t)); % 创建一个与x相同大小，但所有值都是11.403的z数组
plot(t,z1)
hold on
% 从图中可以看出这两个点对应的t1=118 t2=164  有些偏差···
t1=118;
t2=164;
%然后将其代入计算法的公式 求出T和延迟时间
T=2*(t2-t1)  %92
t_delay=2*t1-t2 %72
%可以得出 T=92  τ=72
%为什么两个方法算出来的T和τ不一样？？
%可以求出传递函数

% 定义传递函数的分子和分母多项式系数  
%计算法
num = [90.5];  
den = [92 1];  
g=tf(num,den,'ioDelay',72)
step(g*0.2)
hold on
%% 
%第三题
% 模型检验
%实际曲线
t = [0 10 20 40 60 80 100 120 140 160 180 200 220 240 260 280 300 320 340 360 380 400]; % 时间向量
y = [0 0 0.2 0.6 1.2 1.6 1.8 2.0  1.9 1.7 1.6 1 0.8 0.7 0.7 0.6 0.6 0.4 0.2 0.2 0.15 0.15]; % 系统阶跃响应向量
figure;  
plot(t, y); % 原始数据点  
hold on;  
%  将矩形脉冲响应转换为阶跃响应
%  Δt=20s   幅值Δx=0.2  y1(t)=y(t)+y1(t-20);
%因此可以算出每个时刻的y1值，即阶跃响应值
y1 = [0 0 0.2 0.8 2 3.6 5.4 7.4 9.3 11.0 12.6 13.6 14.4 15.1 15.8 16.4 17.0 17.4 17.6 17.8 17.95 18.1]
t = [0 10 20 40 60 80 100 120 140 160 180 200 220 240 260 280 300 320 340 360 380 400];
plot(t, y1,'r-'); % 原始数据点  
hold on;  
%plot(t_fit, y_fit, 'r-'); %  
xlabel('时间');  
ylabel('液位响应');  
grid on;  
hold on;

%计算法
num = [90.5];  
den = [92 1];  
g=tf(num,den,'ioDelay',72)
step(g*0.2)
hold on

%作图法
num = [90.5];  
den = [181 1];  
g=tf(num,den,'ioDelay',40)
step(g*0.2)
hold on
xlim([0 400]);
legend('矩形脉冲响应曲线', '实际曲线','计算法','作图法');  

%分析结果：计算法与实际曲线基本吻合，误差小; 作图法误差比较大